name: Test Subtitle Vendors

on:
  push:
    branches: [ main, master, develop ]
    paths:
      - 'subtitle_vendor_test/**'
      - '.github/workflows/test-subtitle-vendors.yml'
  pull_request:
    branches: [ main, master, develop ]
    paths:
      - 'subtitle_vendor_test/**'
      - '.github/workflows/test-subtitle-vendors.yml'
  workflow_dispatch:  # Allow manual triggering
  schedule:
    - cron: '0 6 * * 1'  # Run every Monday at 6 AM UTC

jobs:
  test-subtitle-vendors:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11, 3.12]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('subtitle_vendor_test/requirements-subtitle-test.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r subtitle_vendor_test/requirements-subtitle-test.txt
        
    - name: Verify installations
      run: |
        echo "🔍 Verifying package installations..."
        python -c "import yt_dlp; print(f'✅ yt-dlp version: {yt_dlp.version.__version__}')"
        python -c "import youtube_transcript_api; print('✅ youtube-transcript-api imported successfully')"
        python -c "import requests; print(f'✅ requests version: {requests.__version__}')"
        
    - name: Run subtitle vendor tests
      run: |
        echo "🚀 Starting subtitle vendor tests..."
        python subtitle_vendor_test/test_subtitle_vendors.py
        
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: subtitle-test-results-python-${{ matrix.python-version }}
        path: |
          *.log
          *.txt
          *.json
        retention-days: 7
        
    - name: Comment on PR with results
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // Try to read any log files that might contain results
          let results = 'Subtitle vendor tests completed. Check the workflow logs for detailed results.';
          
          try {
            // Look for any output files
            const files = fs.readdirSync('.');
            const logFiles = files.filter(f => f.endsWith('.log') || f.endsWith('.txt'));
            
            if (logFiles.length > 0) {
              results += '\n\nLog files generated: ' + logFiles.join(', ');
            }
          } catch (e) {
            console.log('No log files found');
          }
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## 🧪 Subtitle Vendor Test Results (Python ${{ matrix.python-version }})
            
            ${results}
            
            **Workflow:** [View Details](${context.payload.repository.html_url}/actions/runs/${context.runId})
            `
          });

  test-subtitle-vendors-summary:
    runs-on: ubuntu-latest
    needs: test-subtitle-vendors
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      
    - name: Generate summary report
      run: |
        echo "# 🧪 Subtitle Vendor Test Summary" > test_summary.md
        echo "" >> test_summary.md
        echo "**Date:** $(date)" >> test_summary.md
        echo "**Python Versions Tested:** 3.9, 3.10, 3.11, 3.12" >> test_summary.md
        echo "**Vendors Tested:**" >> test_summary.md
        echo "- yt-dlp" >> test_summary.md
        echo "- youtube-transcript-api" >> test_summary.md
        echo "- EasySubAPI" >> test_summary.md
        echo "" >> test_summary.md
        echo "**Test Videos:**" >> test_summary.md
        echo "- 1GpGqwXExYE" >> test_summary.md
        echo "- 9uY6N2Bl0pU" >> test_summary.md
        echo "" >> test_summary.md
        echo "## Results" >> test_summary.md
        echo "" >> test_summary.md
        
        # Check if any artifacts were downloaded
        if [ -d "subtitle-test-results-python-3.9" ] || [ -d "subtitle-test-results-python-3.10" ] || [ -d "subtitle-test-results-python-3.11" ] || [ -d "subtitle-test-results-python-3.12" ]; then
          echo "✅ Test artifacts found. Check individual workflow runs for detailed results." >> test_summary.md
        else
          echo "⚠️ No test artifacts found." >> test_summary.md
        fi
        
        echo "" >> test_summary.md
        echo "## Next Steps" >> test_summary.md
        echo "" >> test_summary.md
        echo "1. Review the test results in the workflow logs" >> test_summary.md
        echo "2. Check for any failed vendor tests" >> test_summary.md
        echo "3. Update dependencies if needed" >> test_summary.md
        echo "4. Consider adding more test videos if coverage is insufficient" >> test_summary.md
        
        cat test_summary.md
        
    - name: Upload summary report
      uses: actions/upload-artifact@v3
      with:
        name: subtitle-test-summary
        path: test_summary.md
        retention-days: 30
